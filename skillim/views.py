from django.shortcuts import render
import telebot
from telebot import types
from .models import Worker, Pause, Statistic
import datetime
from datetime import timedelta
from datetime import timezone
import pytz
from django.views.decorators.csrf import csrf_exempt
import json

API_TOKEN = '1062766086:AAGDCBiJK4C_VLKDs3D_s7CPIlDrL1t5_78'
bot = telebot.TeleBot(API_TOKEN)

tz = pytz.timezone('Etc/GMT-2')


def selector(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if message['text'] == '‚úÖ –í —Å–µ—Ç–∏':
            markup.row('üè¢ –û—Ñ–∏—Å', 'üè† –î–æ–º')
            markup.row('‚úñ –û—Ç–º–µ–Ω–∞')
            bot.send_message(chat_id=message['chat']['id'], text='–†–∞–±–æ—Ç–∞', reply_markup=markup)

        elif message['text'] == 'üö´ –ù–µ –≤ —Å–µ—Ç–∏':
            markup.row('üîï –û—Ç–≥—É–ª', 'üíäÔ∏è –ë–æ–ª—å–Ω–∏—á–Ω—ã–π')
            markup.row('‚úñ –û—Ç–º–µ–Ω–∞')
            bot.send_message(chat_id=message['chat']['id'], text='üö´ –ù–µ –≤ —Å–µ—Ç–∏', reply_markup=markup)

        elif message['text'] == 'üíäÔ∏è –ë–æ–ª—å–Ω–∏—á–Ω—ã–π':
            markup = types.InlineKeyboardMarkup()
            sick_one = types.InlineKeyboardButton(text='–æ—Ç 1‚É£ –¥–æ 3‚É£ –¥–Ω–µ–π', callback_data='|–æ—Ç 1 –¥–æ 3 –¥–Ω–µ–π')
            sick_two = types.InlineKeyboardButton(text='–æ—Ç 3‚É£ –¥–æ 5‚É£ –¥–Ω–µ–π', callback_data='|–æ—Ç 3 –¥–æ 5 –¥–Ω–µ–π')
            sick_three = types.InlineKeyboardButton(text='–±–æ–ª–µ–µ 5‚É£ –¥–Ω–µ–π', callback_data='|–±–æ–ª–µ–µ 5‚É£ –¥–Ω–µ–π')
            markup.add(sick_one)
            markup.add(sick_two)
            markup.add(sick_three)
            bot.send_message(chat_id=message['chat']['id'], text='üíäÔ∏è –ë–æ–ª—å–Ω–∏—á–Ω—ã–π', reply_markup=markup)

        elif message['text'] == 'üîï –û—Ç–≥—É–ª':
            obj, created = Statistic.objects.update_or_create(worker_id=message['chat']['id'],
                                                              current_day=datetime.datetime.today().strftime(
                                                                  '%Y-%m-%d'))
            obj.wait = 2
            obj.save()
            bot.send_message(chat_id=message['chat']['id'], text='üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É')

        elif message['text'] == '‚úñ –û—Ç–º–µ–Ω–∞':
            try:
                worker = Statistic.objects.get(worker_id=message['chat']['id'],
                                           current_day=datetime.datetime.today().strftime('%Y-%m-%d'))
                worker.delete()
            except:
                pass

            markup.row('‚úÖ –í —Å–µ—Ç–∏', 'üö´ –ù–µ –≤ —Å–µ—Ç–∏')
            markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            bot.send_message(chat_id=message['chat']['id'], text='‚úñ –û—Ç–º–µ–Ω–∞', reply_markup=markup)


        elif message['text'] == 'üè¢ –û—Ñ–∏—Å' or message['text'] == 'üè† –î–æ–º':
            get, create = Statistic.objects.get_or_create(worker_id=message['chat']['id'],
                                            current_day=datetime.datetime.today().strftime('%Y-%m-%d'))
            get.wait = 1
            get.place = message['text']
            get.save()
            bot.send_message(chat_id=message['chat']['id'], text='üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É')

        elif message['text'] == '‚è∏ –ü–∞—É–∑–∞':
            stat = Statistic.objects.filter(worker_id=message['chat']['id'], current_status='–ê–∫—Ç–∏–≤–Ω—ã–π').first()
            stat.current_status = '–ü–∞—É–∑–∞'
            stat.save()
            get, pause = Pause.objects.get_or_create(statistic_id=stat.id)
            get.start_pause = datetime.datetime.now(pytz.utc)
            get.save()
            markup.row('‚ñ∂  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '‚èπÔ∏è –°—Ç–æ–ø')
            markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            bot.send_message(chat_id=message['chat']['id'], text='‚è∏ –ü–∞—É–∑–∞', reply_markup=markup)

        elif message['text'] == '‚èπÔ∏è –°—Ç–æ–ø':
            stat = Statistic.objects.filter(worker_id=message['chat']['id'], current_day=datetime.datetime.today().strftime('%Y-%m-%d')).first()
            stat.current_status = '–ó–∞–∫–æ–Ω—á–∏–ª'
            stat.end_time = datetime.datetime.now(tz=tz)
            stat.save()
            get, pause = Pause.objects.get_or_create(statistic_id=stat.id)
            markup.row('‚òë –ó–∞–≤–µ—Ä—à–∏—Ç—å')
            diff_time = str(datetime.datetime.now(pytz.utc) - stat.start_time).split(".")[0]
            bot.send_message(chat_id=message['chat']['id'],
                             text='‚öôÔ∏è –ó–∞–¥–∞—á–∞: ' + stat.task + '\n' +
                                  '‚è≥Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ' + str((stat.start_time+timedelta(hours=2)).strftime('%H:%M')) + '\n' +
                                  'üçΩ –û–±–µ–¥: ' + str(get.start_pause) + '\n' +
                                  '‚åõÔ∏è –í—Ä–µ–º—è —É—Ö–æ–¥–∞: ' + str(stat.end_time.strftime('%H:%M')) + '\n' +
                                  '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞‚Ä®' + '\n' +
                                  '‚è± –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: ' + diff_time + '\n' +
                                  'üçΩ –í—Ä–µ–º—è –æ–±–µ–¥–∞: ' + str(get.total_time).split('.')[0] + '\n' +
                                  '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞‚Ä®',
                             reply_markup=markup)

        elif message['text'] == '‚ñ∂  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
            stat = Statistic.objects.filter(worker_id=message['chat']['id'], current_status='–ü–∞—É–∑–∞').first()
            stat.current_status = '–ê–∫—Ç–∏–≤–Ω—ã–π'
            stat.save()
            pause = Pause.objects.get(statistic_id=stat.id)
            pause.total_time += datetime.datetime.now(pytz.utc) - pause.start_pause
            pause.save()
            markup.row('‚è∏ –ü–∞—É–∑–∞', '‚èπÔ∏è –°—Ç–æ–ø')
            markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            bot.send_message(chat_id=message['chat']['id'], text='‚ñ∂  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', reply_markup=markup)

        elif message['text'] == '‚òë –ì–æ—Ç–æ–≤–æ':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',)
            bot.send_message(chat_id=message['chat']['id'], text='–ñ–¥–µ–º –Ω–∞ —Ä–∞–±–æ—Ç–µ', reply_markup=markup)

        elif message['text'] == '‚òë –ó–∞–≤–µ—Ä—à–∏—Ç—å':
            stat = Statistic.objects.filter(worker_id=message['chat']['id'],
                                            current_day=datetime.datetime.today().strftime('%Y-%m-%d'))
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if stat:
                markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            else:
                markup.row('‚úÖ –í —Å–µ—Ç–∏', 'üö´ –ù–µ –≤ —Å–µ—Ç–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            bot.send_message(chat_id=message['chat']['id'], text='üòÉ –°–ø–∞—Å–∏–±–æ! –î–æ –∑–∞–≤—Ç—Ä–∞!', reply_markup=markup)

        elif message['text'] == '‚òëÔ∏è –°–ø–∞—Å–∏–±–æ!':
            markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            bot.send_message(chat_id=message['chat']['id'], text='–î–æ –∑–∞–≤—Ç—Ä–∞', reply_markup=markup)

        elif message['text'] == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            markup = types.InlineKeyboardMarkup()
            workers = Worker.objects.all()
            for i in workers:
                worker = types.InlineKeyboardButton(text='üë§Ô∏è' + i.name, callback_data=i.telegram_id)
                markup.add(worker)

            bot.send_message(chat_id=message['chat']['id'],
                             text='‚òëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:',
                             reply_markup=markup,
                             parse_mode='HTML')
            stat = Statistic.objects.filter(worker_id=message['chat']['id'],
                                                           current_day=datetime.datetime.today().strftime(
                                                               '%Y-%m-%d')).first()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if stat == None:
                markup.row('‚úÖ –í —Å–µ—Ç–∏', 'üö´ –ù–µ –≤ —Å–µ—Ç–∏')
                markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
                bot.send_message(chat_id=message['chat']['id'], text='–ù–æ–≤—ã–π –¥–µ–Ω—å', reply_markup=markup)

        else:
            try:
                stat = Statistic.objects.filter(worker_id=message['chat']['id'],
                                                current_day=datetime.datetime.today().strftime('%Y-%m-%d')).first()
                if stat:
                    if stat.wait == 1:
                        markup.row('‚è∏ –ü–∞—É–∑–∞', '‚èπÔ∏è –°—Ç–æ–ø')
                        markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
                        stat.wait = 0
                        stat.start_time = datetime.datetime.now()
                        stat.current_status = '–ê–∫—Ç–∏–≤–Ω—ã–π'
                        stat.task = message['text']
                        stat.save()
                        text = '‚öôÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: ' + message['text'] + '\n' + '‚è≥ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ' + str(
                            datetime.datetime.now().strftime('%H:%M')) + '\n' + '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è‚Ä®' + '\n' + 'üòÉ –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!'

                        bot.send_message(chat_id=message['chat']['id'], text=text, reply_markup=markup)
                    if stat.wait == 2:
                        markup.row('‚òë –ì–æ—Ç–æ–≤–æ')
                        markup.row('‚úñ –û—Ç–º–µ–Ω–∞')
                        stat.task = message['text']
                        stat.start_time = datetime.datetime.now()
                        stat.save()
                        text = 'üìÖ–û—Ç–≥—É–ª: ' + str(datetime.datetime.now()) + '\n' + '‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: ' + message['text']
                        bot.send_message(chat_id=message['chat']['id'], text=text, reply_markup=markup)
            except Exception as e:
                bot.send_message(chat_id=message['chat']['id'], text=e)

def query(call):
            if call['data'][0] == '|':
                stat, create = Statistic.objects.get_or_create(worker_id=call['message']['chat']['id'],
                                                               current_day=datetime.datetime.today().strftime(
                                                                  '%Y-%m-%d'))
                worker = Worker.objects.filter(telegram_id=call['message']['chat']['id']).first()
                worker.sick = datetime.datetime.now()
                worker.save()
                stat.task = call['data'][1:]
                stat.current_status = 'üíäÔ∏è –ë–æ–ª—å–Ω–∏—á–Ω—ã–π'
                stat.start_time = datetime.datetime.now()
                stat.save()
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.row('‚òëÔ∏è –°–ø–∞—Å–∏–±–æ!')
                markup.row('‚úñ –û—Ç–º–µ–Ω–∞')
                text = 'üíäÔ∏è –ë–æ–ª—å–Ω–∏—á–Ω—ã–π: ' + call['data'][1:] +  '\n' + 'üí™Ô∏è –ë—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–¥–æ—Ä–∞–≤–ª–µ–Ω–∏—è!'
                bot.send_message(chat_id=call['message']['chat']['id'],
                                 text=text,
                                 reply_markup=markup)
            else:
                stat = Statistic.objects.filter(worker_id=call['data'],
                                                                 current_day=datetime.datetime.today().strftime(
                                                                  '%Y-%m-%d')).first()
                worker = Worker.objects.filter(telegram_id=call['data']).first()
                if worker.sick:
                    bot.send_message(chat_id=call['message']['chat']['id'],
                                    text='–ù–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º  —Å ' + str(worker.sick))

                if stat == None:
                    bot.send_message(chat_id=call['message']['chat']['id'],
                                     text='–ù–µ –≤ —Å–µ—Ç–∏')
                    return
                get, pause = Pause.objects.get_or_create(statistic_id=stat.id)
                try:
                    markup = types.InlineKeyboardMarkup()
                    sender = types.InlineKeyboardButton(text='üí¨ –ù–∞–ø–∏—Å–∞—Ç—å', url='https://telegram.dog/'+worker.alias)
                    markup.add(sender)
                    if not stat.end_time:
                        end = '-'
                    else:
                        end = (stat.end_time+timedelta(hours=2)).strftime('%H:%M')

                    if not stat.start_time:
                        start = '-'
                    else:
                        start = (stat.start_time+timedelta(hours=2)).strftime('%H:%M')

                    bot.send_message(chat_id=call['message']['chat']['id'],
                                     text='üë§Ô∏è ' + worker.name + '\n' +
                                          '‚òë –°—Ç–∞—Ç—É—Å: ' + stat.current_status + ' ('+ stat.place +')'+'\n' +
                                          '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞' + '\n' +
                                          '‚öôÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: ' + str(stat.task) + '\n' +
                                          '‚è≥Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ' + str(start) + '\n' +
                                          'üçΩ –û–±–µ–¥: ' + str(get.total_time).split('.')[0] + '\n' +
                                          '‚åõÔ∏è –í—Ä–µ–º—è —É—Ö–æ–¥–∞: ' + str(end),
                                     reply_markup=markup)

                except Exception as e:
                    bot.send_message(chat_id=message['chat']['id'], text=e)

def command(message):
        stat = Statistic.objects.filter(worker_id=message['chat']['id'],
                                        current_day=datetime.datetime.today().strftime('%Y-%m-%d'))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if stat:
            markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        else:
            markup.row('‚úÖ –í —Å–µ—Ç–∏', 'üö´ –ù–µ –≤ —Å–µ—Ç–∏')
            markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        bot.send_message(chat_id=message['chat']['id'], text='–ü—Ä–∏–≤–µ—Ç', reply_markup=markup)


@csrf_exempt
def list(request):
    print('AAAAAAAAAAAAAAAAA', request.body)
    if 'callback_query' in json.loads(request.body):
        message = json.loads(request.body)['callback_query']
        query(message)
    elif 'entities' in json.loads(request.body):
            message = json.loads(request.body)['message']
            query(message)
    else:
        message = json.loads(request.body)['message']
        selector(message)
    return render(request, 'main/list.html', {})


        